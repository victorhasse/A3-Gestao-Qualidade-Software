# Nome do workflow no repositório
name: Integração continua de Java com Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Jobs do ambiente de desenvolvimento
  build-dev:
    # Runner com uma instância do ubuntu
    runs-on: ubuntu-latest
    environment: 
      name: dev
    name: build-dev - Compilação e teste
    steps:
    # Configura o terminal virtual para interface gráfica
    - name: Configura xvfb para tela 0
      run: Xvfb :1 -screen 0 1600x1200x24 &    
    # Utiliza a action checkout para fazer o git clone no runner
    - name: Realiza o checkout do repositório
      uses: actions/checkout@v3
     # Utiliza a action setup-java para configurar a versão necessária do JDK
    - name: Configura o JDK 18
      uses: actions/setup-java@v3
      with:
        java-version: '18'
        distribution: 'temurin'
        cache: maven
    # Executa a compilação e testes do projeto com o Maven no runner    
    - name: Compila o projeto com Maven
      run: mvn -B test --file pom.xml
      # Configura as variáveis de ambiente
      env:
        # Roda a aplicação a tela 1 do Xvfb
        DISPLAY: :1
    # Desliga o Xvfb
    - name: Desliga Xvfb
      run: killall Xvfb    
  
  # Jobs do ambiente de homologação
  build-hmg:
    # Runner com uma instância do ubuntu      
    runs-on: ubuntu-latest
    environment: 
      name: hmg
    needs: build-dev
    name: build-hmg - Análise do código
    steps:
    # Configura o terminal virtual para interface gráfica
    - name: Configura xvfb para tela 0
      run: Xvfb :1 -screen 0 1600x1200x24 &    
    # Utiliza a action checkout para fazer o git clone no runner
    - name: Realiza o checkout do repositório
      uses: actions/checkout@v3 
      with:
        fetch-depth: 0 
    # Utiliza a action setup-java para configurar a versão necessária do JDK
    - name: Configura o JDK 18
      uses: actions/setup-java@v3      
      with:
        java-version: '18'
        distribution: 'temurin'
        cache: maven     
    # Executa os passos da análise do código com o sonarcube     
    - name: Cache dos pacotes do SonarCloud
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    # Configura um cache as dependências do projeto, isso vai permitir 
    # que as próximas execuções do workflow sejam mais rápidas visto 
    # que as dependências já estarão disponibilizadas para o runner
    - name: Cache dos pacotes do Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    # Executa a verificação do projeto com o Maven no runner    
    - name: Verifica o projeto com Maven e Jacoco
      # Configura as variáveis de ambiente
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # Roda a aplicação a tela 1 do Xvfb
        DISPLAY: :1
      #run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=osmarbraz_cadastrocliente_desktop5_base #Default do Sonarcloud
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=victorhasse_A3-Gestao-Qualidade-Software org.jacoco:jacoco-maven-plugin:prepare-agent -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
    # Desliga o Xvfb
    - name: Desliga Xvfb
      run: killall Xvfb  
            
  # Jobs do ambiente de produção
  build-prd:
    # Runner com uma instância do ubuntu      
    runs-on: ubuntu-latest
    environment: 
      name: prd
    needs: build-hmg
    name: build-prd - Empacotamento
    steps:
    # Configura o terminal virtual para interface gráfica
    - name: Configura xvfb para tela 0
      run: Xvfb :1 -screen 0 1600x1200x24 &    
    # Utiliza a action checkout para fazer o git clone no runner        
    - name: Realiza o checkout do repositório
      uses: actions/checkout@v3
    # Utiliza a action setup-java para configurar a versão necessária do JDK  
    - name: Configura o JDK 18
      uses: actions/setup-java@v3
      with:
        java-version: '18'
        distribution: 'temurin'
        cache: maven
    # Executa o empacotamento do projeto com o Maven no runner    
    # O parâmetro -DskipTests pula os testes pois já foram executados no ambiente anterior.
    - name: Empacota o projeto com Maven      
      # Configura as variáveis de ambiente
      env:
        # Roda a aplicação a tela 1 do Xvfb   
        DISPLAY: :1 
      run: mvn -B package --file pom.xml -DskipTests
    # Cria o artefato de download    
    - name: Crie uma pasta temporária(stating) de downloads de artefatos
      run: mkdir staging
    - name: Copia os artefatos a serem publicados na pasta temporária(stating)
      run: cp target/*jar-with-dependencies.jar staging
    - name: Usa Upload Artifact do GitHub Action
      uses: actions/upload-artifact@v4
      with:
        # Nome do arquivo a ser gerado
        name: Package-${{ runner.os }} #.zip será adicionado automaticamente
        # Caminho da pasta temporária (stating)
        path: staging    
    # Desliga o Xvfb
    - name: Desliga Xvfb
      run: killall Xvfb    
